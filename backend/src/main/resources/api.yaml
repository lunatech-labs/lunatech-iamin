openapi: "3.0.0"
info:
  title: IAmIn REST service
  version: 0.0.1-SNAPSHOT
tags:
  - name: version
    description: Everything about versions
  - name: users
    description: Everything regarding user management
  - name: occasions
    description: Everything about occasions
paths:
  /version:
    get:
      tags: [version]
      x-scala-package: version
      operationId: getVersion
      summary: Return the app's version
      responses:
        200:
          description: Current app's version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponseJson'
  /users:
    get:
      tags: [users]
      x-scala-package: users
      operationId: getUsers
      summary: Retrieve a list of all users
      parameters:
        - $ref: '#/components/parameters/PaginationOffsetIdParam'
        - $ref: '#/components/parameters/PaginationLimitParam'
      responses:
        200:
          description: List of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponseJson'
    post:
      tags: [users]
      x-scala-package: users
      operationId: postUsers
      summary: Create a new user
      requestBody:
        description: New user to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequestJson'
        required: true
      responses:
        200:
          description: Successfully created new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseJson'
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
    get:
      tags: [users]
      x-scala-package: users
      operationId: getUsersById
      summary: Retrieves a specific user
      responses:
        200:
          description: Requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseJson'
        404:
          description: Requested user was not found
          content:
            application/json+problem:
              schema:
                $ref: '#/components/schemas/ProblemResponseJson'
    patch:
      tags: [users]
      x-scala-package: users
      operationId: patchUserById
      summary: Updates a specific user
      requestBody:
        description: Updated user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequestJson'
        required: true
      responses:
        200:
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseJson'
        404:
          description: Requested user was not found
          content:
            application/json+problem:
              schema:
                $ref: '#/components/schemas/ProblemResponseJson'
    delete:
      tags: [users]
      x-scala-package: users
      operationId: deleteUserById
      summary: Deletes a specific user
      responses:
        204:
          description: Successfully deleted user
        404:
          description: Requested user was not found
          content:
            application/json+problem:
              schema:
                $ref: '#/components/schemas/ProblemResponseJson'
  /users/{userId}/occasions:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
    get:
      tags: [occasions]
      x-scala-package: occasions
      operationId: getOccasions
      summary: Retrieves all occasions of the user
      parameters:
        - $ref: '#/components/parameters/FromLocalDateParam'
        - $ref: '#/components/parameters/ToLocalDateParam'
      responses:
        200:
          description: List of all available occasions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OccasionsResponseJson'
        404:
          description: Requested user was not found
          content:
            application/json+problem:
              schema:
                $ref: '#/components/schemas/ProblemResponseJson'
    post:
      tags: [occasions]
      x-scala-package: occasions
      operationId: postOccasions
      summary: Creates a new occasion for the user
      requestBody:
        description: New occasion to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostOccasionRequestJson'
        required: true
      responses:
        200:
          description: Successfully created new occasion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OccasionResponseJson'
        404:
          description: Requested user was not found
          content:
            application/json+problem:
              schema:
                $ref: '#/components/schemas/ProblemResponseJson'
        409:
          description: Occasions date overlaps with already existing occasion
          content:
            application/json+problem:
              schema:
                $ref: '#/components/schemas/ProblemResponseJson'
  /users/{userId}/occasions/{date}:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
      - $ref: '#/components/parameters/DateParam'
    get:
      tags: [occasions]
      x-scala-package: occasions
      operationId: getOccasionByDate
      summary: Retrieves an occasion by date
      responses:
        200:
          description: Requested occasion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OccasionResponseJson'
        404:
          description: Requested user or occasion was not found
          content:
            application/json+problem:
              schema:
                $ref: '#/components/schemas/ProblemResponseJson'
    patch:
      tags: [occasions]
      x-scala-package: occasions
      operationId: patchOccasionByDate
      summary: Updated an occasion
      requestBody:
        description: Updated occasion
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchOccasionRequestJson'
        required: true
      responses:
        200:
          description: Successfully updated occasion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OccasionResponseJson'
        404:
          description: Requested user or occasion was not found
          content:
            application/json+problem:
              schema:
                $ref: '#/components/schemas/ProblemResponseJson'
    delete:
      tags: [occasions]
      x-scala-package: occasions
      operationId: deleteOccasionByDate
      summary: Deletes an occasion
      responses:
        204:
          description: Succesfully deleted occasion
        404:
          description: Requested user or occasion was not found
          content:
            application/json+problem:
              schema:
                $ref: '#/components/schemas/ProblemResponseJson'
components:
  parameters:
    UserIdParam:
      name: userId
      in: path
      description: Id of the specific user
      required: true
      schema:
        type: string
    DateParam:
      name: date
      in: path
      description: Date of the specific occasion
      required: true
      schema:
        type: string
#        format: date # TODO: Enable once upstream fixes https://github.com/twilio/guardrail/issues/260
    FromLocalDateParam:
      name: from
      in: query
      description: From date
      schema:
        type: string
        format: date
      x-scala-type: FromLocalDate_Hack # Manually implemented wrapper type to circumvent Guardrail double implicit value
    ToLocalDateParam:
      name: to
      in: query
      description: To date
      schema:
        type: string
        format: date
      x-scala-type: ToLocalDate_Hack # Manually implemented wrapper type to circumvent Guardrail double implicit value
    PaginationOffsetIdParam:
      name: userId
      in: query
      description: Offset id to start from
      schema:
        type: string
    PaginationLimitParam:
      name: limit
      in: query
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 10
  schemas:
    VersionResponseJson:
      type: object
      properties:
        version:
          type: string
      required:
        - version
    PostUserRequestJson:
      type: object
      properties:
        displayName:
          type: string
      required:
        - displayName
    PatchUserRequestJson:
      type: object
      properties:
        displayName:
          type: string
      required:
        - displayName
    UserResponseJson:
      type: object
      properties:
        id:
          type: string
        displayName:
          type: string
      required:
        - id
        - displayName
    UsersResponseJson:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseJson'
      required:
        - items
    PostOccasionRequestJson:
      type: object
      properties:
        date:
          type: string
          format: date
        isPresent:
          type: boolean
      required:
        - date
        - isPresent
    PatchOccasionRequestJson:
      type: object
      properties:
        isPresent:
          type: boolean
      required:
        - isPresent
    OccasionResponseJson:
      type: object
      properties:
        date:
          type: string
          format: date
        isPresent:
          type: boolean
      required:
        - date
        - isPresent
    OccasionsResponseJson:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OccasionResponseJson'
      required:
        - items
    ProblemResponseJson:  # Modified from https://github.com/zalando/problem
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and
            readable for engineers (usually not suited for non technical
            stakeholders and not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this
            occurence of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurence of the
            problem.
          example: Connection to the database timed out
      required:
        - title
        - status
        - detail
